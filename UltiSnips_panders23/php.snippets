snippet . "this->" i
$this->$0
endsnippet

snippet - "->" i
->$0
endsnippet

snippet = "=>" i
=>$0
endsnippet

snippet : "self" i
self::$0
endsnippet

snippet <? "php block wo end" !b
<?php
$0
endsnippet

snippet php "php block" !b
<?php
$0
?>
endsnippet

snippet phps "php short tag" !
<?php echo $0 ?>
endsnippet

snippet cl "class" !b
class ${1:`!p snip.rv = snip.basename or "untitled"`}
{
	${2:public function __construct($3)
	{
		$0
	}}
}
endsnippet

snippet m "method" !b
${3:public} function ${1:methdodName}($2)
{
	$0
}
endsnippet

snippet f "function" !b
function ${1:functionName}($2)
{
	$0
}
endsnippet

snippet vd "var_dump" !
var_dump($0);
endsnippet

snippet pr "print_r" !
print_r($0);
endsnippet

snippet p "public" !
public $0
endsnippet

snippet pp "protected" !
protected $0
endsnippet


snippet ppp "private" !
private $0
endsnippet


snippet v "variable" !b
${2:var} $${1:var}${3: = ${0:null}};
endsnippet

snippet forc "optimised for" !
for ($$3 = ${5:0}, $$4 = ${1:count($${2:var})}; $${3:i} ${5:<} $${4:c}; $$3${6:++})
{
	${0:print_r($$2[$$3]);}
}
endsnippet

snippet try "try/catch" !b
try {
    $0
} catch (${2:Exception} $${1:e}) {
    ${3:var_dump (
		$$1->getMessage(),
		$$1->getTraceAsString()
	);}
}
endsnippet

snippet d "phpdoc block" !b
/**
 * $0
 */
endsnippet

snippet ds "phpdoc singleline " !b
/** $0 */
endsnippet

snippet dsv "phpdoc singleline for variables" !b
/** @var ${2:stdClass} ${1:var} ${0:description} */
endsnippet
